# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2018-01-11 08:31
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('name', models.CharField(max_length=64, verbose_name='姓名')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='电话')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否可登录')),
                ('is_admin', models.BooleanField(default=False, verbose_name='是否为管理员')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('can_show_user', '可以访问用户管理页面'), ('can_show_add_user', '可以访问添加用户页面'), ('can_add_user', '可以添加用户'), ('can_delete_user', '可以删除用户'), ('can_show_edit_user', '可以访问用户编辑页面'), ('can_edit_user', '可以编辑用户'), ('can_show_change_pass_user', '可以访问重置密码页面'), ('can_change_pass_user', '可以重置密码'), ('can_show_change_permission_user', '可以访问修改用户权限页面'), ('can_change_permission_user', '可以修改用户权限')),
                'verbose_name_plural': '用户表',
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_type', models.CharField(choices=[('hardwareserver', '硬件服务器'), ('softwareserver', '软件服务器')], default='server', max_length=64, verbose_name='资产类型')),
                ('asset_status', models.CharField(choices=[('online', '在线'), ('offline', '离线'), ('putaway', '上架'), ('removeoff', '下架')], default='online', max_length=64, verbose_name='资产状态')),
                ('cabinet_num', models.CharField(blank=True, max_length=32, null=True, verbose_name='机柜号')),
                ('cabinet_order', models.CharField(blank=True, max_length=32, null=True, verbose_name='机柜中序号')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'permissions': (('can_show_asset', '可以访问资产管理页面'), ('can_update_asset', '可以更新资产'), ('can_delete_asset', '可以删除资产'), ('can_show_asset_detail', '可以访问资产详情页面'), ('can_show_add_asset', '可以访问添加资产页面'), ('can_show_add_hardware_server', '可以访问添加硬件服务器资产页面'), ('can_show_add_software_server', '可以访问添加软件件服务器资产页面'), ('can_add_hardware_server', '可以添加硬件服务器资产'), ('can_add_software_server', '可以添加软件服务器资产'), ('can_show_edit_asset', '可以访问资产编辑页面'), ('can_edit_asset', '可以编辑资产')),
                'verbose_name_plural': '资产表',
            },
        ),
        migrations.CreateModel(
            name='AssetRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(null=True, verbose_name='变更内容')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='变更来源')),
            ],
            options={
                'verbose_name_plural': '资产变更记录表',
            },
        ),
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='业务线名称')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='c', to=settings.AUTH_USER_MODEL, verbose_name='所属业务联系人')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m', to=settings.AUTH_USER_MODEL, verbose_name='所属系统管理员')),
            ],
            options={
                'permissions': (('can_show_business_unit', '可以访问业务线管理页面'), ('can_update_business_unit', '可以更新业务线'), ('can_delete_business_unit', '可以删除业务线'), ('can_show_add_business_unit', '可以访问添加业务线页面'), ('can_add_business_unit', '可以添加业务线')),
                'verbose_name_plural': '业务线表',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_model', models.CharField(blank=True, max_length=128, null=True, verbose_name='CPU型号')),
                ('cpu_physical_count', models.IntegerField(blank=True, null=True, verbose_name='cpu物理个数')),
                ('cpu_count', models.IntegerField(blank=True, null=True, verbose_name='cpu逻辑个数')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': 'CPU部件表',
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(blank=True, max_length=64, null=True, verbose_name='插槽')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN号')),
                ('manufacturer', models.CharField(blank=True, max_length=64, null=True, verbose_name='制造商')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='型号')),
                ('speed', models.IntegerField(default=10, verbose_name='转速')),
                ('total_capacity', models.FloatField(blank=True, null=True, verbose_name='磁盘总大小GB')),
                ('capacity', models.FloatField(blank=True, null=True, verbose_name='磁盘大小GB')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': '硬盘组件表',
            },
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': '错误日志表',
            },
        ),
        migrations.CreateModel(
            name='HardwareServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(blank=True, max_length=128, null=True, verbose_name='主机名')),
                ('sn', models.CharField(max_length=64, unique=True, verbose_name='SN号')),
                ('fast_server_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='快速服务号')),
                ('manufacturer', models.CharField(blank=True, max_length=64, null=True, verbose_name='制造商')),
                ('model', models.CharField(blank=True, max_length=64, null=True, verbose_name='型号')),
                ('manager_ip', models.GenericIPAddressField(unique=True, verbose_name='管理IP')),
                ('os_version', models.CharField(blank=True, max_length=64, null=True, verbose_name='系统版本')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': '硬件服务器表',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='机房')),
                ('floor', models.IntegerField(default=1, verbose_name='楼层')),
            ],
            options={
                'verbose_name_plural': 'IDC表',
                'permissions': (('can_show_idc', '可以访问IDC管理页面'), ('can_update_idc', '可以更新IDC'), ('can_delete_idc', '可以删除IDC'), ('can_show_add_idc', '可以访问添加IDC页面'), ('can_add_idc', '可以添加IDC')),
            },
        ),
        migrations.CreateModel(
            name='NIC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(blank=True, max_length=64, null=True, verbose_name='插槽')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='网卡名称')),
                ('macaddress', models.CharField(max_length=64, unique=True, verbose_name='MAC')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': '网卡组件表',
            },
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(blank=True, max_length=64, null=True, verbose_name='插槽')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN号')),
                ('manufacturer', models.CharField(blank=True, max_length=64, null=True, verbose_name='制造商')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='型号')),
                ('speed', models.IntegerField(blank=True, null=True, verbose_name='频率')),
                ('total_capacity', models.IntegerField(blank=True, null=True, verbose_name='内存总大小(MB)')),
                ('capacity', models.IntegerField(blank=True, null=True, verbose_name='内存大小(MB)')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': '内存组件表',
            },
        ),
        migrations.CreateModel(
            name='SoftwareServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(max_length=128, unique=True, verbose_name='主机名')),
                ('os_version', models.CharField(blank=True, max_length=64, null=True, verbose_name='系统版本')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('latest_date', models.DateField(auto_now=True, verbose_name='更新时间')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.Asset', verbose_name='所属资产')),
            ],
            options={
                'verbose_name_plural': '硬件服务器表',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='标签名称')),
                ('create_date', models.DateField(auto_now_add=True, verbose_name='创建时间')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='所属创建人')),
            ],
            options={
                'permissions': (('can_show_tag', '可以访问标签管理页面'), ('can_update_tag', '可以更新标签'), ('can_delete_tag', '可以删除标签'), ('can_show_add_tag', '可以访问添加标签页面'), ('can_add_tag', '可以添加标签')),
                'verbose_name_plural': '标签表',
            },
        ),
        migrations.AlterUniqueTogether(
            name='idc',
            unique_together=set([('name', 'floor')]),
        ),
        migrations.AddField(
            model_name='asset',
            name='business_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.BusinessUnit', verbose_name='所属业务线'),
        ),
        migrations.AddField(
            model_name='asset',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb_data.IDC', verbose_name='所属IDC机房'),
        ),
        migrations.AddField(
            model_name='asset',
            name='tag',
            field=models.ManyToManyField(blank=True, to='cmdb_data.Tag', verbose_name='所属标签'),
        ),
    ]
